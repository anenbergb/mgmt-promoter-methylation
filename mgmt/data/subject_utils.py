from pathlib import Path
from typing import Any

import torch
import torchio as tio


def get_batch_images_and_size(batch: dict) -> tuple[list[str], int]:
    """Get number of images and images names in a batch.

    Args:
        batch: Dictionary generated by a :class:`torch.utils.data.DataLoader`
        extracting data from a :class:`torchio.SubjectsDataset`.

    Raises:
        RuntimeError: If the batch does not seem to contain any dictionaries
        that seem to represent a :class:`torchio.Image`.
    """
    names = []
    for image_name, image_dict in batch.items():
        if isinstance(image_dict, dict) and tio.constants.DATA in image_dict:
            size = len(image_dict[tio.constants.DATA])
            names.append(image_name)
    if not names:
        raise RuntimeError("The batch does not seem to contain any images")
    return names, size


def get_batch_nonimages(batch: dict) -> dict[str, list]:
    out = {}
    for name, value in batch.items():
        if isinstance(value, torch.Tensor):
            out[name] = value.tolist()
        elif isinstance(value, list):
            out[name] = value
    return out


def get_subjects_from_batch(batch: dict) -> list[tio.Subject]:
    """Get list of subjects from collated batch.

    Args:
        batch: Dictionary generated by a :class:`torch.utils.data.DataLoader`
        extracting data from a :class:`torchio.SubjectsDataset`.
    """

    subjects = []
    image_names, batch_size = get_batch_images_and_size(batch)
    batch_nonimages = get_batch_nonimages(batch)
    for i in range(batch_size):
        subject_dict = {}
        for image_name in image_names:
            image_dict = batch[image_name]
            data = image_dict[tio.constants.DATA][i]
            affine = image_dict[tio.constants.AFFINE][i]
            path = Path(image_dict[tio.constants.PATH][i])
            is_label = image_dict[tio.constants.TYPE][i] == tio.constants.LABEL
            klass = tio.LabelMap if is_label else tio.ScalarImage
            image = klass(tensor=data, affine=affine, filename=path.name)
            subject_dict[image_name] = image
        for name, nonimage_list in batch_nonimages.items():
            subject_dict[name] = nonimage_list[i]

        subject = tio.Subject(subject_dict)
        if tio.constants.HISTORY in batch:
            applied_transforms = batch[tio.constants.HISTORY][i]
            for transform in applied_transforms:
                transform.add_transform_to_subject_history(subject)
        subjects.append(subject)
    return subjects


def get_subject_nonimages(subject: tio.Subject) -> dict[str, Any]:
    return {k: v for k, v in subject.items() if not isinstance(v, tio.Image)}
